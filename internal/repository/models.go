// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0

package repository

import (
	"database/sql/driver"
	"fmt"
	"time"

	"github.com/google/uuid"
)

type RecordType string

const (
	RecordTypeA    RecordType = "A"
	RecordTypeAAAA RecordType = "AAAA"
)

func (e *RecordType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = RecordType(s)
	case string:
		*e = RecordType(s)
	default:
		return fmt.Errorf("unsupported scan type for RecordType: %T", src)
	}
	return nil
}

type NullRecordType struct {
	RecordType RecordType `json:"record_type"`
	Valid      bool       `json:"valid"` // Valid is true if RecordType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullRecordType) Scan(value interface{}) error {
	if value == nil {
		ns.RecordType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.RecordType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullRecordType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.RecordType), nil
}

type Record struct {
	ID         uuid.UUID  `json:"id"`
	DomainName string     `json:"domain_name"`
	RecordData string     `json:"record_data"`
	RecordType RecordType `json:"record_type"`
	Ttl        int32      `json:"ttl"`
	CreatedAt  time.Time  `json:"created_at"`
	UpdatedAt  time.Time  `json:"updated_at"`
}
