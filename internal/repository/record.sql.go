// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: record.sql

package repository

import (
	"context"

	"github.com/google/uuid"
)

const getRecordByDomainName = `-- name: GetRecordByDomainName :one
SELECT id, domain_name, record_data, record_type, ttl, created_at, updated_at FROM record WHERE domain_name = $1
`

func (q *Queries) GetRecordByDomainName(ctx context.Context, domainName string) (Record, error) {
	row := q.db.QueryRow(ctx, getRecordByDomainName, domainName)
	var i Record
	err := row.Scan(
		&i.ID,
		&i.DomainName,
		&i.RecordData,
		&i.RecordType,
		&i.Ttl,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getRecordByID = `-- name: GetRecordByID :one
SELECT id, domain_name, record_data, record_type, ttl, created_at, updated_at FROM record WHERE id = $1
`

func (q *Queries) GetRecordByID(ctx context.Context, id uuid.UUID) (Record, error) {
	row := q.db.QueryRow(ctx, getRecordByID, id)
	var i Record
	err := row.Scan(
		&i.ID,
		&i.DomainName,
		&i.RecordData,
		&i.RecordType,
		&i.Ttl,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getRecords = `-- name: GetRecords :many
SELECT id, domain_name, record_data, record_type, ttl, created_at, updated_at FROM record
`

func (q *Queries) GetRecords(ctx context.Context) ([]Record, error) {
	rows, err := q.db.Query(ctx, getRecords)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Record
	for rows.Next() {
		var i Record
		if err := rows.Scan(
			&i.ID,
			&i.DomainName,
			&i.RecordData,
			&i.RecordType,
			&i.Ttl,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
